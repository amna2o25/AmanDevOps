name: üåê Full CI/CD + IaC + Monitoring + Scalability

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - 'src/**'
      - 'infra/**'
      - '**/*.php'

env:
  TERRAFORM_WORKING_DIR: infra
  STAGING_URL: https://staging.example.com
  PROD_URL: https://www.example.com

jobs:
  ci:
    name: üîÆ CI - Lint & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer, phpunit
      - run: composer install --no-interaction --prefer-dist
      - run: find . -name "*.php" -print0 | xargs -0 -n1 php -l
      - run: vendor/bin/phpunit --configuration phpunit.xml

  terraform-apply-staging:
    name: üèó Deploy Infra (Staging)
    runs-on: ubuntu-latest
    needs: ci
    environment: staging
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'
      - run: terraform init
      - run: terraform apply -auto-approve

  deploy-staging:
    name: üìÇ Deploy to Staging
    runs-on: ubuntu-latest
    needs: terraform-apply-staging
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_STAGING_SERVER }}
          username: ${{ secrets.FTP_STAGING_USERNAME }}
          password: ${{ secrets.FTP_STAGING_PASSWORD }}
          server-dir: /public_html/staging/

  health-check-staging:
    name: ü©∫ Health Check (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.STAGING_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "‚ùå Health check failed!"; exit 1; fi

  logs-staging:
    name: üìä Logs (Staging)
    runs-on: ubuntu-latest
    needs: health-check-staging
    steps:
      - run: |
          ssh ${{ secrets.SSH_STAGING_USER }}@${{ secrets.SSH_STAGING_HOST }} \
          "tail -n50 /var/log/app/app.log"

  load-test:
    name: ‚ö° Load Test
    runs-on: ubuntu-latest
    needs: logs-staging
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update && sudo apt-get install -y gnupg2 curl
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6
      - run: k6 run --vus 50 --duration 2m tests/load-test.js --out json=load-results.json
      - run: |
          AVG=$(jq '.metrics.http_req_duration.avg' load-results.json)
          if (( $(echo "$AVG > 200" | bc -l) )); then
            echo "‚ùå Performance SLA breached"; exit 1; fi

  approve-production:
    name: ‚úÖ Manual Approval
    runs-on: ubuntu-latest
    needs: load-test
    environment:
      name: production
      url: ${{ env.PROD_URL }}
    steps:
      - name: Await Manual Approval
        uses: hmarr/auto-approve-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: approve-production
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_PROD_SERVER }}
          username: ${{ secrets.FTP_PROD_USERNAME }}
          password: ${{ secrets.FTP_PROD_PASSWORD }}
          server-dir: /public_html/L5SW/Amna/

  monitor-prod:
    name: ü©∫ Health Check (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.PROD_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "‚ùå Health check failed!"; exit 1; fi
      - run: |
          ssh ${{ secrets.SSH_PROD_USER }}@${{ secrets.SSH_PROD_HOST }} \
          "tail -n50 /var/log/app/app.log"
