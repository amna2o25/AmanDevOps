name: Full CI/CD + IaC + Monitoring + Scalability Pipeline

on:
  pull_request:
    paths:
      - 'src/**'
      - 'infra/**'
      - '**/*.php'
  push:
    branches:
      - main

env:
  TERRAFORM_WORKING_DIR: infra
  TF_BACKEND_BUCKET: my-terraform-state
  TF_BACKEND_REGION: eu-west-1
  STAGING_URL: https://staging.example.com
  PROD_URL: https://www.example.com

jobs:
  # 1. CI: PHP Lint, Test, Optional HTML/CSS Lint
  ci:
    name: Build ✓ Lint ✓ Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- PHP Setup ---
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer, phpunit

      - name: Validate PHP syntax
        run: find . -name "*.php" -print0 | xargs -0 -n1 php -l

      - name: Run PHPUnit Tests
        run: vendor/bin/phpunit --configuration phpunit.xml

      # --- Optional: HTML/CSS Linting ---
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install htmlhint and stylelint
        run: npm install -g htmlhint stylelint stylelint-config-standard
      - name: Lint HTML files
        run: htmlhint "**/*.html"
      - name: Lint CSS files
        run: |
          echo '{ "extends": "stylelint-config-standard" }' > .stylelintrc.json
          stylelint "**/*.css"

  # 2. Terraform Plan on PRs
  terraform-plan:
    name: 🛠️ Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'
      - name: Terraform Init
        run: terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=pr-${{ github.event.pull_request.number }}/terraform.tfstate" \
          -backend-config="region=${{ env.TF_BACKEND_REGION }}"
      - name: Terraform fmt & validate
        run: |
          terraform fmt -check
          terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file="envs/staging/main.tfvars" -out=plan.tfplan
      - name: Post Plan to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: plan.tfplan

  # 3. Terraform Apply → Staging
  terraform-apply-staging:
    name: Terraform Apply → Staging
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'
    environment: staging
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=staging/terraform.tfstate" \
          -backend-config="region=${{ env.TF_BACKEND_REGION }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="envs/staging/main.tfvars"

  # 4. Deploy to Staging via FTP
  staging-deploy:
    name: Deploy to Staging via FTP
    runs-on: ubuntu-latest
    needs: terraform-apply-staging
    environment: staging
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_STAGING_SERVER }}
          username: ${{ secrets.FTP_STAGING_USERNAME }}
          password: ${{ secrets.FTP_STAGING_PASSWORD }}
          server-dir: /public_html/staging/

  # 5. Monitor & Logs (Staging)
  monitor-staging:
    name: Monitor & Logs (Staging)
    runs-on: ubuntu-latest
    needs: staging-deploy
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.STAGING_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "Staging health check failed!"; exit 1;
          fi
      - run: |
          ssh ${{ secrets.SSH_STAGING_USER }}@${{ secrets.SSH_STAGING_HOST }} \
            "tail -n50 /var/log/app/app.log"

  # 6. Load Test (Staging)
  load-test-staging:
    name: Load Test (Staging)
    runs-on: ubuntu-latest
    needs: monitor-staging
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update && sudo apt-get install -y gnupg2 curl
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6
      - run: k6 run --vus 50 --duration 2m tests/load-test.js --out json=staging-results.json
      - run: |
          AVG=$(jq '.metrics.http_req_duration.avg' staging-results.json)
          if (( $(echo "$AVG > 200" | bc -l) )); then
            echo "Performance SLA breached"; exit 1;
          fi

  # 7. Terraform Apply → Production
  terraform-apply-prod:
    name: Terraform Apply → Production
    runs-on: ubuntu-latest
    needs: load-test-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        run: terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=production/terraform.tfstate" \
          -backend-config="region=${{ env.TF_BACKEND_REGION }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve -var-file="envs/production/main.tfvars"

  # 8. Deploy to Production via FTP
  prod-deploy:
    name: Deploy to Production via FTP
    runs-on: ubuntu-latest
    needs: terraform-apply-prod
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_PROD_SERVER }}
          username: ${{ secrets.FTP_PROD_USERNAME }}
          password: ${{ secrets.FTP_PROD_PASSWORD }}
          server-dir: /public_html/L5SW/Amna/

  # 9. Monitor & Logs (Production)
  monitor-prod:
    name: Monitor & Logs (Production)
    runs-on: ubuntu-latest
    needs: prod-deploy
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.PROD_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then
            echo "Production health check failed!"; exit 1;
          fi
      - run: |
          ssh ${{ secrets.SSH_PROD_USER }}@${{ secrets.SSH_PROD_HOST }} \
            "tail -n50 /var/log/app/app.log"


  load-test-prod:
    name: Load Test (Production)
    runs-on: ubuntu-latest
    needs: monitor-prod
    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt-get update && sudo apt-get install -y k6
      - run: k6 run --vus 100 --duration 5m tests/load-test.js --out json=prod-results.json
      - run: |
          AVG=$(jq '.metrics.http_req_duration.avg' prod-results.json)
          if (( $(echo "$AVG > 200" | bc -l) )); then
            echo "Production SLA breached"; exit 1;
          fi
