name: üåê Full CI/CD + IaC + Monitoring + Scalability

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - 'src/**'
      - 'infra/**'
      - '**/*.php'
      - '**/*.html'
      - '**/*.css'

env:
  TERRAFORM_WORKING_DIR: infra
  TF_BACKEND_BUCKET: my-terraform-state
  TF_BACKEND_REGION: eu-west-1
  STAGING_URL: https://staging.example.com
  PROD_URL: https://www.example.com

jobs:
  # CI Job
  ci:
    name: üß™ CI - Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: composer, phpunit

      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist || echo "Composer skipped"

      - name: PHP Syntax Check
        run: find . -name "*.php" -print0 | xargs -0 -n1 php -l

      - name: Run PHPUnit Tests
        run: |
          if [ -f ./vendor/bin/phpunit ]; then
            ./vendor/bin/phpunit --configuration phpunit.xml || true
          else
            echo "PHPUnit not found, skipping tests"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Linters
        run: npm install -g htmlhint stylelint stylelint-config-standard

      - name: Lint HTML
        run: htmlhint "**/*.html" || true

      - name: Lint CSS
        run: |
          echo '{ "extends": "stylelint-config-standard" }' > .stylelintrc.json
          stylelint "**/*.css" "!vendor/**/*.css" "!node_modules/**/*.css" || true

  # Terraform Plan
  terraform-plan:
    name: üõ† Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.4.0'
      - run: terraform init
      - run: terraform validate
      - run: terraform plan

  # Apply Terraform
  terraform-apply-staging:
    name: üèó Deploy Infra (Staging)
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
      - run: terraform init
      - run: terraform apply -auto-approve || true

  # Deploy via FTP to Staging
  deploy-staging:
    name: üìÇ Deploy to Staging
    runs-on: ubuntu-latest
    needs: terraform-apply-staging
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_STAGING_SERVER }}
          username: ${{ secrets.FTP_STAGING_USERNAME }}
          password: ${{ secrets.FTP_STAGING_PASSWORD }}
          server-dir: /public_html/staging/

  # Monitor & Logs
  monitor-staging:
    name: üßº Monitor (Staging)
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.STAGING_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then echo "‚ùå Health check failed"; exit 1; fi

  # Load Test
  load-test:
    name: ‚ö° Load Test (Staging)
    runs-on: ubuntu-latest
    needs: monitor-staging
    steps:
      - run: |
          sudo apt-get update && sudo apt-get install -y jq curl gnupg
          curl -s https://dl.k6.io/key.gpg | sudo apt-key add -
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update && sudo apt-get install -y k6
      - run: k6 run --vus 50 --duration 2m tests/load-test.js --out json=results.json || true
      - run: |
          AVG=$(jq '.metrics.http_req_duration.avg' results.json)
          if (( $(echo "$AVG > 200" | bc -l) )); then echo "‚ùå SLA breached"; exit 1; fi

  # Production FTP
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: load-test
    steps:
      - uses: actions/checkout@v4
      - uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_PROD_SERVER }}
          username: ${{ secrets.FTP_PROD_USERNAME }}
          password: ${{ secrets.FTP_PROD_PASSWORD }}
          server-dir: /public_html/L5SW/Amna/

  # Monitor Prod
  monitor-prod:
    name: üßº Monitor (Production)
    runs-on: ubuntu-latest
    needs: deploy-production
    steps:
      - run: |
          STATUS=$(curl -s -o /dev/null -w '%{http_code}' ${{ env.PROD_URL }}/health)
          if [ "$STATUS" -ne 200 ]; then echo "‚ùå Health check failed"; exit 1; fi
