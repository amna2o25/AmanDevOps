name: üîÅ Full CI/CD with Tests, Split Envs, Monitoring & Scalability

on:
  push:
    branches:
      - main

env:
  STAGING_URL: https://digitalwhiz.co.uk/L5SW/Amna/
  PROD_URL: https://digitalwhiz.co.uk/L5SW/Amna/
  FTP_DIR: /public_html/L5SW/Amna/

jobs:
  phpunit:
    name: ‚úÖ Run PHPUnit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install dependencies
        run: composer install
      - name: Run tests
        run: vendor/bin/phpunit

  deploy-staging:
    name: üöÄ Deploy to Staging via FTP
    runs-on: ubuntu-latest
    needs: phpunit
    steps:
      - uses: actions/checkout@v4
      - name: Upload via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ env.FTP_DIR }}

  check-staging:
    name: üîç Health Check - Staging
    runs-on: ubuntu-latest
    needs: deploy-staging
    steps:
      - name: Check Staging Health
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.STAGING_URL }}health")
          if [ "$STATUS" != "200" ]; then
            echo "‚ùå Staging health check failed!"
            exit 1
          fi
          echo "‚úÖ Staging is healthy!"

  load-test:
    name: ‚ö° Load Testing with k6
    runs-on: ubuntu-latest
    needs: check-staging
    steps:
      - name: Install k6 via Snap
        run: |
          sudo snap install k6
      - name: Run load test
        run: |
          echo 'import http from "k6/http"; export default function () { http.get("${{ env.STAGING_URL }}"); }' > test.js
          k6 run --duration 10s --vus 10 test.js

  approve-prod:
    name: ‚è∏Ô∏è Manual Approval
    runs-on: ubuntu-latest
    needs: load-test
    steps:
      - name: Wait for approval
        uses: hmarr/auto-approve-action@v2.0.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

  deploy-prod:
    name: üöÄ Deploy to Production via FTP
    runs-on: ubuntu-latest
    needs: approve-prod
    steps:
      - uses: actions/checkout@v4
      - name: Upload via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          server-dir: ${{ env.FTP_DIR }}

  check-prod:
    name: ‚úÖ Health Check - Production
    runs-on: ubuntu-latest
    needs: deploy-prod
    steps:
      - name: Check Production Health
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.PROD_URL }}health")
          if [ "$STATUS" != "200" ]; then
            echo "‚ùå Production health check failed!"
            exit 1
          fi
          echo "‚úÖ Production is healthy!"
